apply plugin: "com.android.application"

import com.android.build.OutputFile
import org.w3c.dom.Element
import org.w3c.dom.Node

import javax.xml.transform.dom.DOMSource
import javax.xml.transform.stream.StreamResult
import javax.xml.transform.TransformerFactory
import javax.xml.transform.Transformer

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation. If none specified and
 *   // "index.android.js" exists, it will be used. Otherwise "index.js" is
 *   // default. Can be overridden with ENTRY_FILE environment variable.
 *   entryFile: "index.android.js",
 *
 *   // https://reactnative.dev/docs/performance#enable-the-ram-format
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    enableHermes: false,
    entryFile: "index.js",
    bundleAssetName: "app.bundle",
]

apply from: "../../node_modules/react-native/react.gradle"
// apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
// apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

/**
 * Architectures to build native code for in debug.
 */
def nativeArchitectures = project.getProperties().get("reactNativeDebugArchitectures")

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.jitsiapp"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        missingDimensionStrategy 'react-native-camera', 'general'
        vectorDrawables.useSupportLibrary = true
    }
    dexOptions {
       javaMaxHeapSize "3g"
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            if (nativeArchitectures) {
                ndk {
                    abiFilters nativeArchitectures.split(',')
                }
            }
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            // Example: versionCode 1 will generate 1001 for armeabi-v7a, 1002 for x86, etc.
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }

        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    //noinspection GradleDynamicVersion

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    // implementation project(':react-native-fs')

    implementation(project(':react-native-jitsi-meet')) {
      exclude group: 'com.facebook.react',module:'react-native-locale-detector'
      exclude group: 'com.facebook.react',module:'react-native-vector-icons'
      // Un-comment below if using hermes
    //   exclude group: 'com.facebook',module:'hermes'
      // Un-comment any packages below that you have added to your project to prevent `duplicate_classes` errors

        //exclude group: 'com.facebook.react',module:'react-native-fetch-blob'
        exclude group: 'com.facebook.react',module:'react-native-webview'
        exclude group: 'com.facebook.react',module:'react-native-linear-gradient'
        exclude group: 'com.facebook.react',module:'react-native-async-storage'
        exclude group: 'com.facebook.react',module:'react-native-device-info'
        exclude group: 'com.facebook.react',module:'react-native-community_netinfo'
        exclude group: 'com.facebook.react',module:'react-native-svg'
        exclude group: 'com.facebook.react',module:'react-native:0.61.5-jitsi'
    }
    implementation "com.facebook.react:react-native:+"  // From node_modules

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.fbjni'
    }

    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
}

def addAndroidExportedIfNecessary(File manifestFile) {
    def manifestAltered = false
    def reader = manifestFile.newReader()
    def document = groovy.xml.DOMBuilder.parse(reader)
    def application = document.getElementsByTagName("application").item(0)
    if (application != null) {
        println "Searching for activities, services and receivers with intent filters..."
        application.childNodes.each { child ->
            def childNodeName = child.nodeName
            if (childNodeName == "activity" || childNodeName == "activity-alias" ||
                    childNodeName == "service" || childNodeName == "receiver") {
                def attributes = child.getAttributes()
                if (attributes.getNamedItem("android:exported") == null) {
                    def intentFilters = child.childNodes.findAll {
                        it.nodeName == "intent-filter"
                    }
                    if (intentFilters.size() > 0) {
                        println "found ${childNodeName} ${attributes.getNamedItem("android:name").nodeValue} " +
                                "with intent filters but without android:exported attribute"

                        def exportedAttrAdded = false
                        for (def i = 0; i < intentFilters.size(); i++) {
                            def intentFilter = intentFilters[i]
                            def actions = intentFilter.childNodes.findAll {
                                it.nodeName == "action"
                            }
                            for (def j = 0; j < actions.size(); j++) {
                                def action = actions[j]
                                def actionName = action.getAttributes().getNamedItem("android:name").nodeValue
                                if (actionName == "com.google.firebase.MESSAGING_EVENT") {
                                    println "adding exported=false to ${attributes.getNamedItem("android:name")}..."
                                    ((Element) child).setAttribute("android:exported", "false")
                                    manifestAltered = true
                                    exportedAttrAdded = true
                                }
                            }
                        }
                        if (!exportedAttrAdded) {
                            println "adding exported=true to ${attributes.getNamedItem("android:name")}..."
                            ((Element) child).setAttribute("android:exported", "true")
                            manifestAltered = true
                        }
                    }
                }
            }
        }
    }
    if (manifestAltered) {
        document.setXmlStandalone(true)
        Transformer transformer = TransformerFactory.newInstance().newTransformer()
        DOMSource source = new DOMSource(document)
        FileWriter writer = new FileWriter(manifestFile)
        StreamResult result = new StreamResult(writer)
        transformer.transform(source, result)
        println "Done adding missing android:exported attributes to your AndroidManifest.xml. You may want to" +
                "additionally prettify it in Android Studio using [command + option + L](mac) or [CTRL+ALT+L](windows)."
    } else {
        println "Hooray, your AndroidManifest.xml did not need any change."
    }
}

/**
 * Given an AndroidManifest.xml file, extract components with missing `android:exported` attribute, also add that
 * attribute to those components.
 */
def getMissingAndroidExportedComponents(File manifestFile) {
    List<Node> nodesFromDependencies = new ArrayList<>()
    def reader = manifestFile.newReader()
    def document = groovy.xml.DOMBuilder.parse(reader)
    def application = document.getElementsByTagName("application").item(0)
    if (application != null) {
        println "Searching for activities, services and receivers with intent filters..."
        application.childNodes.each { child ->
            def childNodeName = child.nodeName
            if (childNodeName == "activity" || childNodeName == "activity-alias" ||
                    childNodeName == "service" || childNodeName == "receiver") {
                def attributes = child.getAttributes()
                if (attributes.getNamedItem("android:exported") == null) {
                    def intentFilters = child.childNodes.findAll {
                        it.nodeName == "intent-filter"
                    }
                    if (intentFilters.size() > 0) {
                        println "found ${childNodeName} ${attributes.getNamedItem("android:name").nodeValue} " +
                                "with intent filters but without android:exported attribute"

                        def exportedAttrAdded = false
                        for (def i = 0; i < intentFilters.size(); i++) {
                            def intentFilter = intentFilters[i]
                            def actions = intentFilter.childNodes.findAll {
                                it.nodeName == "action"
                            }
                            for (def j = 0; j < actions.size(); j++) {
                                def action = actions[j]
                                def actionName = action.getAttributes().getNamedItem("android:name").nodeValue
                                if (actionName == "com.google.firebase.MESSAGING_EVENT") {
                                    println "adding exported=false to ${attributes.getNamedItem("android:name")}..."
                                    ((Element) child).setAttribute("android:exported", "false")
                                    exportedAttrAdded = true
                                }
                            }
                        }
                        if (!exportedAttrAdded) {
                            println "adding exported=true to ${attributes.getNamedItem("android:name")}..."
                            ((Element) child).setAttribute("android:exported", "true")
                        }
                        nodesFromDependencies.add(child)
                    }
                }
            }
        }
    }
    return nodesFromDependencies
}

/**
 * Add [components] to the given an AndroidManifest.xml file's <application> component
 */
def addManifestFileComponents(File manifestFile, List<Node> components) {
    def reader = manifestFile.newReader()
    def document = groovy.xml.DOMBuilder.parse(reader)
    def application = document.getElementsByTagName("application").item(0)
    if (application != null) {
        println "Adding missing components with android:exported attribute to ${manifestFile.absolutePath} ..."
        components.each { node ->
            Node importedNode = document.importNode(node, true)
            application.appendChild(importedNode)
        }
    }
    if (components.size() > 0) {
        document.setXmlStandalone(true)
        Transformer transformer = TransformerFactory.newInstance().newTransformer()
        DOMSource source = new DOMSource(document)
        FileWriter writer = new FileWriter(manifestFile)
        StreamResult result = new StreamResult(writer)
        transformer.transform(source, result)
        println "Added missing app-dependencies components with android:exported attributes to your " +
                "AndroidManifest.xml.You may want to additionally prettify it in Android Studio using " +
                "[command + option + L](mac) or [CTRL+ALT+L](windows)."
    }
    println "----"
}

task doAddAndroidExportedIfNecessary {
    doLast {
        def root = new File(project.rootDir, "")
        if (root.isDirectory()) {
            def children = root.listFiles()
            for (def i = 0; i < children.size(); i++) {
                File child = children[i]
                if (child.isDirectory()) {
                    File srcDirectory = new File(child, "src")
                    if (srcDirectory.exists() && srcDirectory.isDirectory()) {
                        def srcChildren = srcDirectory.listFiles()
                        for (def j = 0; j < srcChildren.size(); j++) {
                            File manifestFile = new File(srcChildren[j], "AndroidManifest.xml")
                            if (manifestFile.exists() && manifestFile.isFile()) {
                                println "found manifest file: ${manifestFile.absolutePath}"
                                addAndroidExportedIfNecessary(manifestFile)
                                println "-----"
                            }
                        }
                    }
                }
            }
        }
    }
}

/**
 * If your project has dependency on libraries that haven't updated their AndroidManifest.xml files yet to conform to
 * the Android 12 requirement, your app may still fail to build due to missing `android:exported` attributes in those
 * libraries' AndroidManifest.xml files, even after running the [doAddAndroidExportedIfNecessary] task. This task
 * extracts the components that are missing the `android:exported` attribute from the merged manifest, which includes
 * components from imported libraries, then adds the components to the project's AndroidManifest.xml files that contains
 * <application> component. The added components should override their declaration in the libraries' manifest files.
 * As we cannot modify the libraries' manifest files, this should be an acceptable workaround.
 *
 * NOTE: always run [doAddAndroidExportedIfNecessary] first before running this task, in order to avoid adding duplicate
 * components to the project's AndroidManifest.xml files. After [doAddAndroidExportedIfNecessary] finishes, rebuild your
 * project, otherwise the merged manifest won't be created. Only after those steps, execute this task.
 *
 * NOTE: This task assumes certain structure of the path to the merged manifest, which is created after project
 * build. The path structure may be dependent on the gradle version. This task was tested with gradle-6.8 and
 * Android Studio Arctic Fox.
 *
 * NOTE: If your project already targets Android 12 and still contains libraries with missing `android:exported`
 * attributes for required components in their AndroidManifest.xml files, your build will fail and the merged manifest
 * won't be created. Therefore, call this task before you target Android 12; or:
 *  - temporarily downgrade the targetSdkVersion (and compileSDKVersion) to 30
 *  - run [doAddAndroidExportedIfNecessary] task
 *  - rebuild your project (to build the merged manifest)
 *  - run this task
 *  - set the targetSdkVersion back to target Android 12
 */
task doAddAndroidExportedForDependencies {
    doLast {
        List<Node> missingComponents = new ArrayList<>()
        def root = new File(project.rootDir, "")
        if (root.isDirectory()) {
            def children = root.listFiles()
            for (def i = 0; i < children.size(); i++) {
                File child = children[i]
                if (child.isDirectory()) {
                    File mergedManifestsDirectory = new File(child, "build/intermediates/merged_manifests")
                    if (mergedManifestsDirectory.exists() && mergedManifestsDirectory.isDirectory()) {
                        def manifestFiles = mergedManifestsDirectory.listFiles().findAll { directoryChild ->
                            directoryChild.isDirectory() &&
                                    (new File(directoryChild, "AndroidManifest.xml")).exists()
                        }.stream().map { directoryWithManifest ->
                            new File(directoryWithManifest, "AndroidManifest.xml")
                        }.toArray()

                        if (manifestFiles.size() > 0) {
                            File mergedManifest = manifestFiles[0]
                            if (mergedManifest.exists() && mergedManifest.isFile()) {
                                missingComponents = getMissingAndroidExportedComponents(mergedManifest)

                                if (missingComponents.size() > 0) {
                                    File srcDirectory = new File(child, "src")
                                    if (srcDirectory.exists() && srcDirectory.isDirectory()) {
                                        def srcChildren = srcDirectory.listFiles()
                                        for (def j = 0; j < srcChildren.size(); j++) {
                                            File manifestFile = new File(srcChildren[j], "AndroidManifest.xml")
                                            if (manifestFile.exists() && manifestFile.isFile()) {
                                                addManifestFileComponents(manifestFile, missingComponents)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
